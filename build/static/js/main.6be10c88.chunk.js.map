{"version":3,"sources":["Board/Node/Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","Board/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","id","extraClassName","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","localGrid","slice","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","animateDijkstra","nodesInShortestPathOrder","i","setTimeout","addClass","document","getElementById","classList","add","animateShortestPath","boardArray","currentClosest","index","totalDistance","heuristicDistance","splice","updateNeighbors","target","potentialNeighbor","x","y","status","getNeighbors","updateNode","currentNode","targetNode","actualTargetNode","nodeOne","nodeTwo","x1","y1","x2","y2","direction","getDistance","xOne","xTwo","yOne","yTwo","xChange","Math","abs","yChange","manhattanDistance","distanceToCompare","weight","path","animateAStar","DEFAULT_WIDTH","DEFAULT_HEIGHT","NORMAL_NODE_PRESSED","Board","state","width","height","mouseIsPressed","pressedNodeStatus","previousObjectNode","isAlgoProcessing","currentAlgorithm","floor","random","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodeType","getNewGridWithDraggedObject","clearBoard","unshift","getNodesInShortestPathOrder","nodesToAnimate","start","name","forEach","rows","rowNum","cols","colNum","astar","getNodesInShortestPathOrderAStar","event","value","onClick","visualizeDijkstra","visualizeAStar","type","min","max","onChange","handleWidthChange","step","handleHeightChange","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","baseClasses","domElement","intersectionList","split","indexOf","join","newNode","startDistance","visited","startPos","finishPos","currentRow","createNode","prevRow","prevCol","currentCol","prevNode","newPrev","newCurrent","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAIqBA,G,uLACT,IAAD,EAWHC,KAAKC,MATPC,EAFK,EAELA,IACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,QACAC,EALK,EAKLA,OACAC,EANK,EAMLA,YACAC,EAPK,EAOLA,aACAC,EARK,EAQLA,UACAC,EATK,EASLA,IACAC,EAVK,EAULA,GAEEC,EAAiB,GAUrB,OATIR,IACFQ,GAAkB,WAEhBP,IACFO,GAAkB,UACdN,IACJM,GAAkB,SAIlB,wBACED,GAAE,eAAUA,GACZE,UAAS,eAAUD,GACnBL,YAAa,kBAAMA,EAAYG,EAAKP,IACpCK,aAAc,kBAAMA,EAAaE,EAAKP,IACtCM,UAAW,kBAAMA,W,GA7BSK,cCJ3B,SAASC,EAASC,EAAMC,EAAWC,GACxC,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EAGrB,IAFA,IAAMC,EAAYL,EAAKM,QACjBC,EAmCR,SAAqBP,GACnB,IAAMQ,EAAQ,GADW,uBAEzB,YAAkBR,EAAlB,+CAAwB,CAAC,IAAdN,EAAa,+BACtB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAde,EAAa,QACtBD,EAAME,KAAKD,IAFS,oFAFC,kFAOzB,OAAOD,EA1CgBG,CAAYN,GAC1BE,EAAeK,QAAQ,CAC9BC,EAAoBN,GACpB,IAAMO,EAAcP,EAAeQ,QACnC,IAAID,EAAYxB,OAAhB,CACA,GAAIwB,EAAYV,WAAaY,IAAU,OAAOb,EAG9C,GAFAW,EAAYG,WAAY,EACxBd,EAAoBO,KAAKI,GACrBA,IAAgBZ,EAAY,OAAOC,EACvCe,EAAyBJ,EAAaT,KAI1C,SAASQ,EAAoBN,GAC3BA,EAAeY,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMhB,SAAWiB,EAAMjB,YAG/D,SAASc,EAAyBT,EAAMT,GACtC,IAAMsB,EAOR,SAA+Bb,EAAMT,GACnC,IAAMuB,EAAY,GACVpC,EAAasB,EAAbtB,IAAKO,EAAQe,EAARf,IACTA,EAAM,GAAG6B,EAAUb,KAAKV,EAAKN,EAAM,GAAGP,IACtCO,EAAMM,EAAKY,OAAS,GAAGW,EAAUb,KAAKV,EAAKN,EAAM,GAAGP,IACpDA,EAAM,GAAGoC,EAAUb,KAAKV,EAAKN,GAAKP,EAAM,IACxCA,EAAMa,EAAK,GAAGY,OAAS,GAAGW,EAAUb,KAAKV,EAAKN,GAAKP,EAAM,IAC7D,OAAOoC,EAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAASR,aAdnBS,CAAsBjB,EAAMT,GADX,uBAE5C,YAAuBsB,EAAvB,+CAA2C,CAAC,IAAjCG,EAAgC,QACzCA,EAASrB,SAAWK,EAAKL,SAAW,EACpCqB,EAASE,aAAelB,GAJkB,mFA4DvC,SAASmB,EAAgBzB,EAAqB0B,GACnD,IAD8E,IAAD,WACpEC,GACP,GAAIA,IAAM3B,EAAoBS,OAI5B,OAHAmB,YAAW,YAtBjB,SAA6BF,GAC3B,IADsD,IAAD,WAC5CC,GACPC,YAAW,WAAO,IAAD,EACTtB,EAAOoB,EAAyBC,GAChCE,EAAW,CAAC,iBAEdvB,EAAKpB,SACP2C,EAAStB,KAAK,uBAGZD,EAAKrB,UACP4C,EAAStB,KAAK,yBAGhB,EAAAuB,SAASC,eAAT,eAAgCzB,EAAKf,IAArC,YAA4Ce,EAAKtB,MAAOgD,WAAUC,IAAlE,QAAyEJ,KACxE,GAAKF,IAdDA,EAAI,EAAGA,EAAID,EAAyBjB,OAAQkB,IAAM,EAAlDA,GAsBHO,CAAoBR,KACnB,GAAKC,GACF,CAAN,UAEFC,YAAW,WACT,IAAMtB,EAAON,EAAoB2B,GACjCG,SAASC,eAAT,eAAgCzB,EAAKf,IAArC,YAA4Ce,EAAKtB,MAAOgD,UAAUC,IAAI,aACrE,GAAKN,IAVDA,EAAI,EAAGA,GAAK3B,EAAoBS,OAAQkB,IAAK,CAAC,IAAD,IAA7CA,GAA6C,mCClDxD,SAAShB,EAAYwB,EAAY/B,GAE7B,IADA,IAAIgC,EAAgBC,EACXV,EAAI,EAAGA,EAAIvB,EAAeK,OAAQkB,IAAK,CAC5C,IAAMrB,EAAO6B,EAAW/B,EAAeuB,GAAGpC,KAAKa,EAAeuB,GAAG3C,MAC5DoD,GAAkBA,EAAeE,cAAgBhC,EAAKgC,eACvDF,EAAiB9B,EACjB+B,EAAQV,GACDS,EAAeE,gBAAkBhC,EAAKgC,eACzCF,EAAeG,kBAAoBjC,EAAKiC,oBACxCH,EAAiB9B,EACjB+B,EAAQV,GAKpB,OADAvB,EAAeoC,OAAOH,EAAO,GACtBD,EAGX,SAASK,EAAgBnC,EAAM6B,EAAYO,GACvC,IAAItB,EAyBR,SAAsBd,EAAM6B,GACxB,IAGIQ,EAHAC,EAAItC,EAAKf,IACTsD,EAAIvC,EAAKtB,IACToC,EAAY,GAEZe,EAAWS,EAAI,IAAMT,EAAWS,EAAI,GAAGC,KACvCF,EAAoB,CAAEC,EAAGA,EAAI,EAAGC,EAAGA,GACC,SAAhCV,EAAWS,EAAI,GAAGC,GAAGC,QAAmB1B,EAAUb,KAAKoC,IAE3DR,EAAWS,EAAI,IAAMT,EAAWS,EAAI,GAAGC,KACvCF,EAAoB,CAAEC,EAAGA,EAAI,EAAIC,EAAGA,GACA,SAAhCV,EAAWS,EAAI,GAAGC,GAAGC,QAAmB1B,EAAUb,KAAKoC,IAE3DR,EAAWS,GAAGC,EAAI,KAClBF,EAAoB,CAAEC,EAAGA,EAAGC,EAAGA,EAAI,GACC,SAAhCV,EAAWS,GAAGC,EAAI,GAAGC,QAAmB1B,EAAUb,KAAKoC,IAE3DR,EAAWS,GAAGC,EAAI,KAClBF,EAAoB,CAAEC,EAAGA,EAAGC,EAAGA,EAAI,GACC,SAAhCV,EAAWS,GAAGC,EAAI,GAAGC,QAAmB1B,EAAUb,KAAKoC,IAE/D,OAAOvB,EA9CS2B,CAAazC,EAAM6B,GADY,uBAE/C,YAAqBf,EAArB,+CAAgC,CAAC,IAAxBE,EAAuB,QACxBoB,EACAM,EAAW1C,EAAM6B,EAAYb,EAAUoB,GAEvCM,EAAW1C,EAAM6B,EAAWb,EAASsB,GAAGtB,EAASuB,KANV,mFAWnD,SAASG,EAAWC,EAAad,EAAYe,EAAYC,GACrD,IAAIlD,EAuCR,SAAqBmD,EAASC,GAC1B,IAAIC,EAAKF,EAAQ7D,IACbgE,EAAKH,EAAQpE,IACbwE,EAAKH,EAAQ9D,IACbkE,EAAKJ,EAAQrE,IACjB,GAAIwE,EAAKF,GAAMC,IAAOE,EAAI,CACtB,GAA0B,OAAtBL,EAAQM,UACR,MAAO,CAAC,EAAG,CAAC,KAAM,MACf,GAA0B,UAAtBN,EAAQM,UACf,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,MACpB,GAA0B,SAAtBN,EAAQM,UACf,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,MACpB,GAA0B,SAAtBN,EAAQM,UACf,MAAO,CAAC,EAAG,CAAC,IAAK,IAAK,KAAM,MACzB,GAA0B,aAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,MAChB,GAA0B,eAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,MAChB,GAA0B,YAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,MAChB,GAA0B,cAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,WAEpB,GAAIF,EAAKF,GAAMC,IAAOE,EAAI,CAC7B,GAA0B,OAAtBL,EAAQM,UACR,MAAO,CAAC,EAAG,CAAC,IAAK,IAAK,KAAM,QACzB,GAA0B,UAAtBN,EAAQM,UACf,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,QACpB,GAA0B,SAAtBN,EAAQM,UACf,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,QACpB,GAA0B,SAAtBN,EAAQM,UACf,MAAO,CAAC,EAAG,CAAC,KAAM,QACf,GAA0B,aAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,QAChB,GAA0B,eAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,QAChB,GAA0B,YAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,QAChB,GAA0B,cAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,QAG3B,GAAID,EAAKF,GAAMD,IAAOE,EAAI,CACtB,GAA0B,OAAtBJ,EAAQM,UACR,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,QACpB,GAA0B,UAAtBN,EAAQM,UACf,MAAO,CAAC,EAAG,CAAC,IAAK,IAAK,KAAM,QACzB,GAA0B,SAAtBN,EAAQM,UACf,MAAO,CAAC,EAAG,CAAC,KAAM,QACf,GAA0B,SAAtBN,EAAQM,UACf,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,QACpB,GAA0B,aAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,QAChB,GAA0B,eAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,QAChB,GAA0B,YAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,QAChB,GAA0B,cAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,aAEpB,GAAID,EAAKF,GAAMD,IAAOE,EAAI,CAC7B,GAA0B,OAAtBJ,EAAQM,UACR,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,SACpB,GAA0B,UAAtBN,EAAQM,UACf,MAAO,CAAC,EAAG,CAAC,KAAM,SACf,GAA0B,SAAtBN,EAAQM,UACf,MAAO,CAAC,EAAG,CAAC,IAAK,IAAK,KAAM,SACzB,GAA0B,SAAtBN,EAAQM,UACf,MAAO,CAAC,EAAG,CAAC,IAAK,KAAM,SACpB,GAA0B,aAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,SAChB,GAA0B,eAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,SAChB,GAA0B,YAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,SAChB,GAA0B,cAAtBN,EAAQM,UACf,MAAO,CAAC,IAAK,KAAM,UAnHZC,CAAYV,EAAad,EAAWe,EAAWN,GAAGM,EAAWL,IACvEV,EAAWe,EAAWN,GAAGM,EAAWL,GAAGN,oBACxCJ,EAAWe,EAAWN,GAAGM,EAAWL,GAAGN,kBAsH/C,SAA2Ba,EAASC,GAChC,IAAIO,EAAOR,EAAQ7D,IACfsE,EAAOR,EAAQ9D,IACfuE,EAAOV,EAAQpE,IACf+E,EAAOV,EAAQrE,IAEfgF,EAAUC,KAAKC,IAAIN,EAAOC,GAC1BM,EAAUF,KAAKC,IAAIJ,EAAOC,GAE9B,OAAQC,EAAUG,EA/H6CC,CAAkBjC,EAAWe,EAAWN,GAAGM,EAAWL,GAAIM,IAEzH,IAAIkB,EAAoBpB,EAAYhD,SAAWkC,EAAWe,EAAWN,GAAGM,EAAWL,GAAGyB,OAASrE,EAAS,GACpGoE,EAAoBlC,EAAWe,EAAWN,GAAGM,EAAWL,GAAG5C,WAC3DkC,EAAWe,EAAWN,GAAGM,EAAWL,GAAG5C,SAAWoE,EAClDlC,EAAWe,EAAWN,GAAGM,EAAWL,GAAGP,cAAgBH,EAAWe,EAAWN,GAAGM,EAAWL,GAAG5C,SAAWkC,EAAWe,EAAWN,GAAGM,EAAWL,GAAGN,kBAChJJ,EAAWe,EAAWN,GAAGM,EAAWL,GAAGrB,aAAeyB,EACtDd,EAAWe,EAAWN,GAAGM,EAAWL,GAAG0B,KAAOtE,EAAS,GACvDkC,EAAWe,EAAWN,GAAGM,EAAWL,GAAGa,UAAYzD,EAAS,IA0J7D,SAASuE,EAAaxE,EAAqB0B,GAC9C,IADyE,IAAD,WAC/DC,GACL,GAAIA,IAAM3B,EAAoBS,OAI1B,OAHAmB,YAAW,YAtBvB,SAA6BF,GACzB,IADoD,IAAD,WAC1CC,GACLC,YAAW,WAAO,IAAD,EACPtB,EAAOoB,EAAyBC,GAChCE,EAAW,CAAC,iBAEdvB,EAAKpB,SACL2C,EAAStB,KAAK,uBAGdD,EAAKrB,UACL4C,EAAStB,KAAK,yBAGlB,EAAAuB,SAASC,eAAT,eAAgCzB,EAAKf,IAArC,YAA4Ce,EAAKtB,MAAOgD,WAAUC,IAAlE,QAAyEJ,KAC1E,GAAKF,IAdHA,EAAI,EAAGA,EAAID,EAAyBjB,OAAQkB,IAAM,EAAlDA,GAsBGO,CAAoBR,KACrB,GAAKC,GACF,CAAN,UAEJC,YAAW,WACP,IAAMtB,EAAON,EAAoB2B,GACjCG,SAASC,eAAT,eAAgCzB,EAAKf,IAArC,YAA4Ce,EAAKtB,MAAOgD,UAAUC,IAAI,aACvE,GAAKN,IAVHA,EAAI,EAAGA,GAAK3B,EAAoBS,OAAQkB,IAAK,CAAC,IAAD,IAA7CA,GAA6C,mC,+jBC7N1D,IAAM8C,EAAgB,GAChBC,EAAiB,GAIjBC,EAAsB,SAEPC,E,YACnB,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,MAAOL,EACPM,OAAQL,EACR7E,KAAM,GACNC,UAAW,GACXC,WAAY,GACZiF,gBAAgB,EAChBC,kBAAmBN,EACnBO,mBAAoB,GACpBC,kBAAkB,EAClBC,iBAAkB,MAZR,E,iFAiBZ,IAAMtF,EAAY,CAAE8C,EAAGqB,KAAKoB,MAAMpB,KAAKqB,UAAYb,EAAgB,IAAK5B,EAAGoB,KAAKoB,MAAMpB,KAAKqB,UAAYZ,EAAiB,KAClH3E,EAAa,CAAE6C,EAAGqB,KAAKoB,MAAMpB,KAAKqB,UAAYb,EAAgB,IAAK5B,EAAGoB,KAAKoB,MAAMpB,KAAKqB,UAAYZ,EAAiB,KAEnH7E,EAAO0F,EAAed,EAAeC,EAAgB5E,EAAWC,GAEtEjB,KAAK0G,SAAS,CAAE3F,OAAMC,YAAWC,iB,sCAGnBR,EAAKP,GACnB,IAAIF,KAAK+F,MAAMM,iBAAf,CAEA,IAGID,EAHApF,EAAYhB,KAAK+F,MAAM/E,UACvBC,EAAajB,KAAK+F,MAAM9E,WACtBO,EAAOxB,KAAK+F,MAAMhF,KAAKN,GAAKP,GAG9BsB,EAAKpB,UACPY,EAAY,CAAE8C,EAAG5D,EAAK6D,EAAGtD,GACzB2F,EAAqB5E,GAEnBA,EAAKrB,WACPc,EAAa,CAAE6C,EAAG5D,EAAK6D,EAAGtD,GAC1B2F,EAAqB5E,GAGvB,IAAMmF,EAAUC,EAA0B5G,KAAK+F,MAAMhF,KAAMN,EAAKP,EAAKc,EAAWC,GAEhFjB,KAAK0G,SAAS,CACZ3F,KAAM4F,EACN3F,YACAC,aACAiF,gBAAgB,EAChBC,kBAAmB3E,EAAKqF,SACxBT,mBAAoBA,O,uCAIP3F,EAAKP,GACpB,GAAKF,KAAK+F,MAAMG,iBACZlG,KAAK+F,MAAMM,iBAAf,CAEA,IAAIrF,EAAYhB,KAAK+F,MAAM/E,UACvBC,EAAajB,KAAK+F,MAAM9E,WACxB0F,EAAU3G,KAAK+F,MAAMhF,KAjEF,UAmEnBf,KAAK+F,MAAMI,mBAlES,WAkEmCnG,KAAK+F,MAAMI,kBAChEnG,KAAK+F,MAAMK,sBACPpG,KAAK+F,MAAMK,mBAAmBhG,SAAWJ,KAAK+F,MAAMhF,KAAKN,GAAKP,GAAKC,UACnEH,KAAK+F,MAAMK,mBAAmBjG,UAAYH,KAAK+F,MAAMhF,KAAKN,GAAKP,GAAKE,WAC1EuG,EAAUG,EAA4B9G,KAAK+F,MAAMhF,KAAMf,KAAK+F,MAAMK,mBAAmB3F,IAAKT,KAAK+F,MAAMK,mBAAmBlG,IAAKO,EAAKP,GAC9HF,KAAK+F,MAAMK,mBAAmBhG,UAChCY,EAAY,CAAE8C,EAAG5D,EAAK6D,EAAGtD,IAEvBT,KAAK+F,MAAMK,mBAAmBjG,WAChCc,EAAa,CAAE6C,EAAG5D,EAAK6D,EAAGtD,KAI9BkG,EAAUC,EAA0B5G,KAAK+F,MAAMhF,KAAMN,EAAKP,EAAKc,EAAWC,GAG5EjB,KAAK0G,SAAS,CAAE3F,KAAM4F,EAAS3F,YAAWC,aAAYmF,mBAAoBpG,KAAK+F,MAAMhF,KAAKN,GAAKP,Q,sCAI3FF,KAAK+F,MAAMM,kBAEfrG,KAAK0G,SAAS,CAAER,gBAAgB,EAAOC,kBAAmBN,EAAqBO,mBAAoB,S,0CAInGpG,KAAK0G,SAAS,CAAEL,kBAAkB,IAClCrG,KAAK+G,aAFa,IAGVhG,EAASf,KAAK+F,MAAdhF,KACFC,EAAYD,EAAKf,KAAK+F,MAAM/E,UAAU+C,GAAG/D,KAAK+F,MAAM/E,UAAU8C,GAC9D7C,EAAaF,EAAKf,KAAK+F,MAAM9E,WAAW8C,GAAG/D,KAAK+F,MAAM9E,WAAW6C,GAGvEnB,EAF4B7B,EAASC,EAAMC,EAAWC,GF1DnD,SAAqCA,GAG1C,IAFA,IAAM2B,EAA2B,GAC7BuB,EAAclD,EACK,OAAhBkD,GACLvB,EAAyBoE,QAAQ7C,GACjCA,EAAcA,EAAYzB,aAE5B,OAAwC,IAApCE,EAAyBjB,OACpB,GAEFiB,EEiD4BqE,CAA4BhG,IAE7DjB,KAAK0G,SAAS,CAAEL,kBAAkB,M,uCAIlCrG,KAAK0G,SAAS,CAAEL,kBAAkB,IAClCrG,KAAK+G,aAFU,IAGPhG,EAASf,KAAK+F,MAAdhF,KACFC,EAAYD,EAAKf,KAAK+F,MAAM/E,UAAU+C,GAAG/D,KAAK+F,MAAM/E,UAAU8C,GAC9D7C,EAAaF,EAAKf,KAAK+F,MAAM9E,WAAW8C,GAAG/D,KAAK+F,MAAM9E,WAAW6C,GACnEoD,EAAiB,IDvHlB,SAAeC,EAAOvD,EAAQsD,EAAgB7D,EAAY+D,GAC7D,IAAKD,IAAUvD,GAAUuD,IAAUvD,EAC/B,OAAO,EAEXP,EAAW8D,EAAM1G,KAAK0G,EAAMjH,KAAKiB,SAAW,EAC5CkC,EAAW8D,EAAM1G,KAAK0G,EAAMjH,KAAKsD,cAAgB,EACjDH,EAAW8D,EAAM1G,KAAK0G,EAAMjH,KAAK0E,UAAY,KAE7C,IAAItD,EAAiB,GAOrB,IANA+B,EAAWgE,SAAQ,SAACC,EAAMC,GACtBD,EAAKD,SAAQ,SAACG,EAAMC,GAChBnG,EAAeG,KAAK+F,SAIrBlG,EAAeK,QAAQ,CAE1B,IADA,IAAIwC,EAActC,EAAYwB,EAAY/B,GACZ,SAAvB6C,EAAYH,QAAqB1C,EAAeK,QACnDwC,EAActC,EAAYwB,EAAY/B,GAE1C,GAAI6C,EAAYhD,WAAaY,IACzB,OAAO,EAIX,GAFAmF,EAAezF,KAAK0C,GACpBA,EAAYH,OAAS,UACjBG,EAAYzD,KAAOkD,EAAOlD,GAC1B,MAAO,WAEXiD,EAAgBQ,EAAad,EAAYO,IC4F7C8D,CAAM1G,EAAWC,EAAYiG,EAAgBnG,GAE7C2E,EAAawB,EDwEV,SAA0CjG,GAG7C,IAFA,IAAM2B,EAA2B,GAC7BuB,EAAclD,EACK,OAAhBkD,GACHvB,EAAyBoE,QAAQ7C,GACjCA,EAAcA,EAAYzB,aAE9B,OAAwC,IAApCE,EAAyBjB,OAClB,GAEJiB,ECnF0B+E,CAAiC1G,IAElEjB,KAAK0G,SAAS,CAAEL,kBAAkB,M,wCAGlBuB,GAEhB,IAAM5G,EAAY,CAAE8C,EAAGqB,KAAKoB,MAAMpB,KAAKqB,UAAYxG,KAAK+F,MAAMC,MAAQ,IAAKjC,EAAGoB,KAAKoB,MAAMpB,KAAKqB,UAAYxG,KAAK+F,MAAME,OAAS,KACxHhF,EAAa,CAAE6C,EAAGqB,KAAKoB,MAAMpB,KAAKqB,UAAYxG,KAAK+F,MAAMC,MAAQ,IAAKjC,EAAGoB,KAAKoB,MAAMpB,KAAKqB,UAAYxG,KAAK+F,MAAME,OAAS,KAEzHlF,EAAO0F,EAAezG,KAAK+F,MAAMC,MAAOhG,KAAK+F,MAAME,OAAQjF,EAAWC,GAE5EjB,KAAK0G,SAAS,CAAE3F,KAAMA,EAAMC,YAAWC,aAAY+E,MAAO4B,EAAMhE,OAAOiE,U,yCAGtDD,GAEjB,IAAM5G,EAAY,CAAE8C,EAAGqB,KAAKoB,MAAMpB,KAAKqB,UAAYxG,KAAK+F,MAAMC,MAAQ,IAAKjC,EAAGoB,KAAKoB,MAAMpB,KAAKqB,UAAYxG,KAAK+F,MAAME,OAAS,KACxHhF,EAAa,CAAE6C,EAAGqB,KAAKoB,MAAMpB,KAAKqB,UAAYxG,KAAK+F,MAAMC,MAAQ,IAAKjC,EAAGoB,KAAKoB,MAAMpB,KAAKqB,UAAYxG,KAAK+F,MAAME,OAAS,KAEzHlF,EAAO0F,EAAezG,KAAK+F,MAAMC,MAAOhG,KAAK+F,MAAME,OAAQjF,EAAWC,GAE5EjB,KAAK0G,SAAS,CAAE3F,KAAMA,EAAMC,YAAWC,aAAYgF,OAAQ2B,EAAMhE,OAAOiE,U,+BAGhE,IAAD,SAC0B7H,KAAK+F,MAA9BhF,EADD,EACCA,KAAMmF,EADP,EACOA,eAEd,OACE,oCACE,yBAAKxF,GAAG,YACN,4BAAQA,GAAG,iBAAiBoH,QAAS,kBAAM,EAAKC,sBAAhD,kCAGA,4BAAQrH,GAAG,iBAAiBoH,QAAS,kBAAM,EAAKE,mBAAhD,gBAGA,4BAAQtH,GAAG,mBAAmBoH,QAAS,kBAAM,EAAKf,eAAlD,eAGA,yBAAKnG,UAAU,gBACb,wCAAcZ,KAAK+F,MAAMC,MAAzB,OACA,2BACEtF,GAAG,WACHuH,KAAK,QACLC,IAAI,KAAKC,IAAI,KACbN,MAAO7H,KAAK+F,MAAMC,MAClBoC,SAAU,SAACR,GAAD,OAAW,EAAKS,kBAAkBT,IAC5CU,KAAK,OAET,yBAAK1H,UAAU,gBACb,yCAAeZ,KAAK+F,MAAME,OAA1B,OACA,2BACEvF,GAAG,WACHuH,KAAK,QACLC,IAAI,KAAKC,IAAI,KACbN,MAAO7H,KAAK+F,MAAME,OAClBmC,SAAU,SAACR,GAAD,OAAW,EAAKW,mBAAmBX,IAC7CU,KAAK,QAGX,yBAAK1H,UAAU,iCACb,yBAAKA,UAAU,gBAAf,UAAqC,0BAAMA,UAAU,kBACrD,yBAAKA,UAAU,gBAAf,WAAsC,0BAAMA,UAAU,mBACtD,yBAAKA,UAAU,gBAAf,sBAAiD,0BAAMA,UAAU,iCACjE,yBAAKA,UAAU,gBAAf,YAAuC,0BAAMA,UAAU,oBACvD,yBAAKA,UAAU,gBAAf,kBAA6C,0BAAMA,UAAU,2BAE/D,2BAAOA,UAAU,QACf,+BACGG,EAAKyH,KAAI,SAAC/H,EAAKgI,GACd,OACE,wBAAI/H,GAAE,cAAS+H,GAAUC,IAAKD,GAC3BhI,EAAI+H,KAAI,SAAChH,EAAMmH,GAAa,IACnBlI,EAAwCe,EAAxCf,IAAKP,EAAmCsB,EAAnCtB,IAAKC,EAA8BqB,EAA9BrB,SAAUC,EAAoBoB,EAApBpB,QAASC,EAAWmB,EAAXnB,OACrC,OACE,kBAAC,EAAD,CACEqI,IAAKC,EACLzI,IAAKA,EACLC,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACR6F,eAAgBA,EAChB5F,YAAa,SAACG,EAAKP,GAAN,OAAc,EAAK0I,gBAAgBnI,EAAKP,IACrDK,aAAc,SAACE,EAAKP,GAAN,OACZ,EAAK2I,iBAAiBpI,EAAKP,IAE7BM,UAAW,kBAAM,EAAKsI,iBACtBrI,IAAKA,EACLC,GAAE,UAAKD,EAAL,YAAYP,iB,mCAiBlC,IALY,IAAD,OACLyG,EAAU3G,KAAK+F,MAAMhF,KAAKM,QAE1B0H,EAAc,CAAC,OAAQ,QAAS,SAAU,QAEvCtI,EAAM,EAAGA,EAAMT,KAAK+F,MAAME,OAAQxF,IACzC,IADiD,IAAD,WACvCP,GACP,IAAM8I,EAAahG,SAASC,eAAT,eAAgCxC,EAAhC,YAAuCP,IAC1D,GAAI,EAAK6F,MAAMhF,KAAKN,IAAQ,EAAKsF,MAAMhF,KAAKN,GAAKP,GAAM,CACrD,IAAMsB,EAAO,EAAKuE,MAAMhF,KAAKN,GAAKP,GAE9B+I,EAAmB,CAAC,QACpBD,GAAcA,EAAWpI,YAC3BqI,EAAmBF,EAAYxG,QAAO,SAAAsF,GAAK,OAAK,IAAMmB,EAAWpI,UAAUsI,MAAM,KAAKC,QAAQtB,OAGhGmB,EAAWpI,UAAYqI,EAAiBG,KAAK,KAC7C,IAAMC,EAAO,KACR7H,EADQ,CAEXL,SAAUY,IACVuH,cAAevH,IACfwH,SAAS,EACTvH,WAAW,EACXU,aAAc,KACdkC,UAAW,KACXpB,cAAezB,IACf0B,kBAAmB,KACnBgC,KAAM,KACND,OAAQ,IAEVmB,EAAQlG,GAAKP,GAAOmJ,IAxBfnJ,EAAM,EAAGA,EAAMF,KAAK+F,MAAMC,MAAO9F,IAAQ,EAAzCA,GA4BXF,KAAK0G,SAAS,CAAE3F,KAAM4F,Q,GAnPS9F,aAuP7B4F,EAAiB,SAACT,EAAOC,EAAQuD,EAAUC,GAG/C,IAFA,IAAM1I,EAAO,GAEJN,EAAM,EAAGA,EAAMwF,EAAQxF,IAAO,CAErC,IADA,IAAMiJ,EAAa,GACVxJ,EAAM,EAAGA,EAAM8F,EAAO9F,IAAO,CACpC,IAAMsB,EAAOmI,EAAWzJ,EAAKO,EAAK+I,EAAUC,GAC5CC,EAAWjI,KAAKD,GAElBT,EAAKU,KAAKiI,GAEZ,OAAO3I,GAGH4I,EAAa,SAACzJ,EAAKO,EAAK+I,EAAUC,GACtC,IAAMrJ,EAAUK,IAAQ+I,EAASzF,GAAK7D,IAAQsJ,EAAS1F,EACjD3D,EAAWM,IAAQgJ,EAAU1F,GAAK7D,IAAQuJ,EAAU3F,EAE1D,MAAO,CACL5D,MACAO,MACAC,GAAG,GAAD,OAAKD,EAAL,YAAYP,GACdE,QAASA,EACTD,SAAUA,EACVgB,SAAUY,IACVyB,cAAezB,IACfC,WAAW,EACX3B,QAAQ,EACRqC,aAAc,KACdmE,SAAUzG,EAxRa,QAwRkBD,EAvRjB,SAuRkD0F,EAC1EjB,UAAW,KACXnB,kBAAmB,KACnBgC,KAAM,KACND,OAAQ,EACRxB,OAAQ,cAIN4C,EAA4B,SAAC7F,EAAMN,EAAKP,EAAKc,EAAWC,GAC5D,IAAM0F,EAAU5F,EAAKM,QACfG,EAAOmF,EAAQlG,GAAKP,GAC1B,IAAMsB,EAAKpB,UAAWoB,EAAKrB,SAAW,CACpC,IAAMkJ,EAAO,KACR7H,EADQ,CAEXnB,QAASmB,EAAKnB,OACd2D,OAAQxC,EAAKnB,OAAS,YAAc,SAEtCsG,EAAQlG,GAAKP,GAAOmJ,EAEtB,OAAO1C,GAGHG,EAA8B,SAAC/F,EAAM6I,EAASC,EAASH,EAAYI,GACvE,IAAMnD,EAAU5F,EAAKM,QACf0I,EAAWpD,EAAQiD,GAASC,GAC5B1F,EAAcwC,EAAQ+C,GAAYI,GACxC,GAAIC,EAAS3J,QAAS,CACpB,IAAM4J,EAAO,KACRD,EADQ,CAEX3J,SAAS,EACTyG,SAAUhB,IAENoE,EAAU,KACX9F,EADW,CAEd/D,SAAS,EACTyG,SA5TqB,QA6TrBxG,QAAQ8D,EAAY9D,QAAiB8D,EAAY9D,SAEnDsG,EAAQiD,GAASC,GAAWG,EAC5BrD,EAAQ+C,GAAYI,GAAcG,EAEpC,GAAIF,EAAS5J,SAAU,CACrB,IAAM6J,EAAO,KACRD,EADQ,CAEX5J,UAAU,EACV0G,SAAUhB,IAENoE,EAAU,KACX9F,EADW,CAEdhE,UAAU,EACV0G,SA1UsB,SA2UtBxG,QAAQ8D,EAAY9D,QAAiB8D,EAAY9D,SAEnDsG,EAAQiD,GAASC,GAAWG,EAC5BrD,EAAQ+C,GAAYI,GAAcG,EAEpC,OAAOtD,GC9UMuD,MARf,WACE,OACE,yBAAKtJ,UAAU,OACb,kBAAC,EAAD,QCKcuJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzH,SAASC,eAAe,SD2H3C,kBAAmByH,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6be10c88.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      id,\n    } = this.props;\n    let extraClassName = '';\n    if (isFinish) {\n      extraClassName += 'finish ';\n    }\n    if (isStart) {\n      extraClassName += 'start ';\n    } if (isWall) {\n      extraClassName += 'wall ';\n    }\n\n    return (\n      <td\n        id={`node-${id}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}>\n      </td>\n    );\n  }\n}\n","export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const localGrid = grid.slice();\n  const unvisitedNodes = getAllNodes(localGrid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, localGrid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  if (nodesInShortestPathOrder.length === 1) {\n    return [];\n  }\n  return nodesInShortestPathOrder;\n}\n\nfunction animateShortestPath(nodesInShortestPathOrder) {\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n    setTimeout(() => {\n      const node = nodesInShortestPathOrder[i];\n      const addClass = ['shortest-path'];\n\n      if (node.isStart) {\n        addClass.push('shortest-path-start');\n      }\n\n      if (node.isFinish) {\n        addClass.push('shortest-path-finish');\n      }\n\n      document.getElementById(`node-${node.row}-${node.col}`).classList.add(...addClass);\n    }, 50 * i);\n  }\n}\n\nexport function animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n  for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n    if (i === visitedNodesInOrder.length) {\n      setTimeout(() => {\n        animateShortestPath(nodesInShortestPathOrder);\n      }, 10 * i);\n      return;\n    }\n    setTimeout(() => {\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).classList.add('visited');\n    }, 10 * i);\n  }\n}\n","export function astar(start, target, nodesToAnimate, boardArray, name) {\r\n    if (!start || !target || start === target) {\r\n        return false;\r\n    }\r\n    boardArray[start.row][start.col].distance = 0;\r\n    boardArray[start.row][start.col].totalDistance = 0;\r\n    boardArray[start.row][start.col].direction = \"up\";\r\n\r\n    let unvisitedNodes = [];\r\n    boardArray.forEach((rows, rowNum) => {\r\n        rows.forEach((cols, colNum) => {\r\n            unvisitedNodes.push(cols);\r\n        });\r\n    });\r\n\r\n    while (unvisitedNodes.length) {\r\n        let currentNode = closestNode(boardArray, unvisitedNodes);\r\n        while (currentNode.status === \"wall\" && unvisitedNodes.length) {\r\n            currentNode = closestNode(boardArray, unvisitedNodes);\r\n        }\r\n        if (currentNode.distance === Infinity) {\r\n            return false;\r\n        }\r\n        nodesToAnimate.push(currentNode);\r\n        currentNode.status = \"visited\";\r\n        if (currentNode.id === target.id) {\r\n            return \"success!\";\r\n        }\r\n        updateNeighbors(currentNode, boardArray, target);\r\n    }\r\n}\r\n\r\nfunction closestNode(boardArray, unvisitedNodes) {\r\n    let currentClosest, index;\r\n    for (let i = 0; i < unvisitedNodes.length; i++) {\r\n        const node = boardArray[unvisitedNodes[i].row][unvisitedNodes[i].col];\r\n        if (!currentClosest || currentClosest.totalDistance > node.totalDistance) {\r\n            currentClosest = node;\r\n            index = i;\r\n        } else if (currentClosest.totalDistance === node.totalDistance) {\r\n            if (currentClosest.heuristicDistance > node.heuristicDistance) {\r\n                currentClosest = node;\r\n                index = i;\r\n            }\r\n        }\r\n    }\r\n    unvisitedNodes.splice(index, 1);\r\n    return currentClosest;\r\n}\r\n\r\nfunction updateNeighbors(node, boardArray, target) {\r\n    let neighbors = getNeighbors(node, boardArray);\r\n    for (let neighbor of neighbors) {\r\n        if (target) {\r\n            updateNode(node, boardArray, neighbor, target);\r\n        } else {\r\n            updateNode(node, boardArray[neighbor.x][neighbor.y]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateNode(currentNode, boardArray, targetNode, actualTargetNode) {\r\n    let distance = getDistance(currentNode, boardArray[targetNode.x][targetNode.y]);\r\n    if (!boardArray[targetNode.x][targetNode.y].heuristicDistance) {\r\n        boardArray[targetNode.x][targetNode.y].heuristicDistance = manhattanDistance(boardArray[targetNode.x][targetNode.y], actualTargetNode);\r\n    }\r\n    let distanceToCompare = currentNode.distance + boardArray[targetNode.x][targetNode.y].weight + distance[0];\r\n    if (distanceToCompare < boardArray[targetNode.x][targetNode.y].distance) {\r\n        boardArray[targetNode.x][targetNode.y].distance = distanceToCompare;\r\n        boardArray[targetNode.x][targetNode.y].totalDistance = boardArray[targetNode.x][targetNode.y].distance + boardArray[targetNode.x][targetNode.y].heuristicDistance;\r\n        boardArray[targetNode.x][targetNode.y].previousNode = currentNode;\r\n        boardArray[targetNode.x][targetNode.y].path = distance[1];\r\n        boardArray[targetNode.x][targetNode.y].direction = distance[2];\r\n    }\r\n}\r\n\r\nfunction getNeighbors(node, boardArray) {\r\n    let x = node.row;\r\n    let y = node.col;\r\n    let neighbors = [];\r\n    let potentialNeighbor;\r\n    if (boardArray[x - 1] && boardArray[x - 1][y]) {\r\n        potentialNeighbor = { x: x - 1, y: y };\r\n        if (boardArray[x - 1][y].status !== \"wall\") neighbors.push(potentialNeighbor);\r\n    }\r\n    if (boardArray[x + 1] && boardArray[x + 1][y]) {\r\n        potentialNeighbor = { x: x + 1., y: y };\r\n        if (boardArray[x + 1][y].status !== \"wall\") neighbors.push(potentialNeighbor);\r\n    }\r\n    if (boardArray[x][y - 1]) {\r\n        potentialNeighbor = { x: x, y: y - 1 };\r\n        if (boardArray[x][y - 1].status !== \"wall\") neighbors.push(potentialNeighbor);\r\n    }\r\n    if (boardArray[x][y + 1]) {\r\n        potentialNeighbor = { x: x, y: y + 1 };\r\n        if (boardArray[x][y + 1].status !== \"wall\") neighbors.push(potentialNeighbor);\r\n    }\r\n    return neighbors;\r\n}\r\n\r\n\r\nfunction getDistance(nodeOne, nodeTwo) {\r\n    let x1 = nodeOne.row;\r\n    let y1 = nodeOne.col;\r\n    let x2 = nodeTwo.row;\r\n    let y2 = nodeTwo.col;\r\n    if (x2 < x1 && y1 === y2) {\r\n        if (nodeOne.direction === \"up\") {\r\n            return [1, [\"f\"], \"up\"];\r\n        } else if (nodeOne.direction === \"right\") {\r\n            return [2, [\"l\", \"f\"], \"up\"];\r\n        } else if (nodeOne.direction === \"left\") {\r\n            return [2, [\"r\", \"f\"], \"up\"];\r\n        } else if (nodeOne.direction === \"down\") {\r\n            return [3, [\"r\", \"r\", \"f\"], \"up\"];\r\n        } else if (nodeOne.direction === \"up-right\") {\r\n            return [1.5, null, \"up\"];\r\n        } else if (nodeOne.direction === \"down-right\") {\r\n            return [2.5, null, \"up\"];\r\n        } else if (nodeOne.direction === \"up-left\") {\r\n            return [1.5, null, \"up\"];\r\n        } else if (nodeOne.direction === \"down-left\") {\r\n            return [2.5, null, \"up\"];\r\n        }\r\n    } else if (x2 > x1 && y1 === y2) {\r\n        if (nodeOne.direction === \"up\") {\r\n            return [3, [\"r\", \"r\", \"f\"], \"down\"];\r\n        } else if (nodeOne.direction === \"right\") {\r\n            return [2, [\"r\", \"f\"], \"down\"];\r\n        } else if (nodeOne.direction === \"left\") {\r\n            return [2, [\"l\", \"f\"], \"down\"];\r\n        } else if (nodeOne.direction === \"down\") {\r\n            return [1, [\"f\"], \"down\"];\r\n        } else if (nodeOne.direction === \"up-right\") {\r\n            return [2.5, null, \"down\"];\r\n        } else if (nodeOne.direction === \"down-right\") {\r\n            return [1.5, null, \"down\"];\r\n        } else if (nodeOne.direction === \"up-left\") {\r\n            return [2.5, null, \"down\"];\r\n        } else if (nodeOne.direction === \"down-left\") {\r\n            return [1.5, null, \"down\"];\r\n        }\r\n    }\r\n    if (y2 < y1 && x1 === x2) {\r\n        if (nodeOne.direction === \"up\") {\r\n            return [2, [\"l\", \"f\"], \"left\"];\r\n        } else if (nodeOne.direction === \"right\") {\r\n            return [3, [\"l\", \"l\", \"f\"], \"left\"];\r\n        } else if (nodeOne.direction === \"left\") {\r\n            return [1, [\"f\"], \"left\"];\r\n        } else if (nodeOne.direction === \"down\") {\r\n            return [2, [\"r\", \"f\"], \"left\"];\r\n        } else if (nodeOne.direction === \"up-right\") {\r\n            return [2.5, null, \"left\"];\r\n        } else if (nodeOne.direction === \"down-right\") {\r\n            return [2.5, null, \"left\"];\r\n        } else if (nodeOne.direction === \"up-left\") {\r\n            return [1.5, null, \"left\"];\r\n        } else if (nodeOne.direction === \"down-left\") {\r\n            return [1.5, null, \"left\"];\r\n        }\r\n    } else if (y2 > y1 && x1 === x2) {\r\n        if (nodeOne.direction === \"up\") {\r\n            return [2, [\"r\", \"f\"], \"right\"];\r\n        } else if (nodeOne.direction === \"right\") {\r\n            return [1, [\"f\"], \"right\"];\r\n        } else if (nodeOne.direction === \"left\") {\r\n            return [3, [\"r\", \"r\", \"f\"], \"right\"];\r\n        } else if (nodeOne.direction === \"down\") {\r\n            return [2, [\"l\", \"f\"], \"right\"];\r\n        } else if (nodeOne.direction === \"up-right\") {\r\n            return [1.5, null, \"right\"];\r\n        } else if (nodeOne.direction === \"down-right\") {\r\n            return [1.5, null, \"right\"];\r\n        } else if (nodeOne.direction === \"up-left\") {\r\n            return [2.5, null, \"right\"];\r\n        } else if (nodeOne.direction === \"down-left\") {\r\n            return [2.5, null, \"right\"];\r\n        }\r\n    }\r\n}\r\n\r\nfunction manhattanDistance(nodeOne, nodeTwo) {\r\n    let xOne = nodeOne.row;\r\n    let xTwo = nodeTwo.row;\r\n    let yOne = nodeOne.col;\r\n    let yTwo = nodeTwo.col;\r\n\r\n    let xChange = Math.abs(xOne - xTwo);\r\n    let yChange = Math.abs(yOne - yTwo);\r\n\r\n    return (xChange + yChange);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAStar(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    if (nodesInShortestPathOrder.length === 1) {\r\n        return [];\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n\r\nfunction animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n        setTimeout(() => {\r\n            const node = nodesInShortestPathOrder[i];\r\n            const addClass = ['shortest-path'];\r\n\r\n            if (node.isStart) {\r\n                addClass.push('shortest-path-start');\r\n            }\r\n\r\n            if (node.isFinish) {\r\n                addClass.push('shortest-path-finish');\r\n            }\r\n\r\n            document.getElementById(`node-${node.row}-${node.col}`).classList.add(...addClass);\r\n        }, 50 * i);\r\n    }\r\n}\r\n\r\nexport function animateAStar(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n        if (i === visitedNodesInOrder.length) {\r\n            setTimeout(() => {\r\n                animateShortestPath(nodesInShortestPathOrder);\r\n            }, 10 * i);\r\n            return;\r\n        }\r\n        setTimeout(() => {\r\n            const node = visitedNodesInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).classList.add('visited');\r\n        }, 10 * i);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder, animateDijkstra } from '../algorithms/dijkstra';\nimport { astar, getNodesInShortestPathOrderAStar, animateAStar } from '../algorithms/astar';\n\nimport './Board.css';\nconst DEFAULT_WIDTH = 50;\nconst DEFAULT_HEIGHT = 20;\n\nconst START_NODE_PRESSED = 'start';\nconst FINISH_NODE_PRESSED = 'finish';\nconst NORMAL_NODE_PRESSED = 'normal';\n\nexport default class Board extends Component {\n  constructor() {\n    super();\n    this.state = {\n      width: DEFAULT_WIDTH,\n      height: DEFAULT_HEIGHT,\n      grid: [],\n      startNode: {},\n      finishNode: {},\n      mouseIsPressed: false,\n      pressedNodeStatus: NORMAL_NODE_PRESSED,\n      previousObjectNode: {},\n      isAlgoProcessing: false,\n      currentAlgorithm: null,\n    };\n  }\n\n  componentDidMount() {\n    const startNode = { x: Math.floor(Math.random() * (DEFAULT_WIDTH - 1)), y: Math.floor(Math.random() * (DEFAULT_HEIGHT - 1)) };\n    const finishNode = { x: Math.floor(Math.random() * (DEFAULT_WIDTH - 1)), y: Math.floor(Math.random() * (DEFAULT_HEIGHT - 1)) };\n\n    const grid = getInitialGrid(DEFAULT_WIDTH, DEFAULT_HEIGHT, startNode, finishNode);\n\n    this.setState({ grid, startNode, finishNode });\n  }\n\n  handleMouseDown(row, col) {\n    if (this.state.isAlgoProcessing) return;\n\n    let startNode = this.state.startNode;\n    let finishNode = this.state.finishNode;\n    const node = this.state.grid[row][col];\n    let previousObjectNode;\n\n    if (node.isStart) {\n      startNode = { x: col, y: row };\n      previousObjectNode = node;\n    }\n    if (node.isFinish) {\n      finishNode = { x: col, y: row };\n      previousObjectNode = node;\n    }\n\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, startNode, finishNode);\n\n    this.setState({\n      grid: newGrid,\n      startNode,\n      finishNode,\n      mouseIsPressed: true,\n      pressedNodeStatus: node.nodeType,\n      previousObjectNode: previousObjectNode,\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    if (this.state.isAlgoProcessing) return;\n\n    let startNode = this.state.startNode;\n    let finishNode = this.state.finishNode;\n    let newGrid = this.state.grid;\n\n    if (this.state.pressedNodeStatus === START_NODE_PRESSED || this.state.pressedNodeStatus === FINISH_NODE_PRESSED) {\n      if (this.state.previousObjectNode\n        && !((this.state.previousObjectNode.isStart && this.state.grid[row][col].isFinish)\n          || (this.state.previousObjectNode.isFinish && this.state.grid[row][col].isStart))) {\n        newGrid = getNewGridWithDraggedObject(this.state.grid, this.state.previousObjectNode.row, this.state.previousObjectNode.col, row, col);\n        if (this.state.previousObjectNode.isStart) {\n          startNode = { x: col, y: row };\n        }\n        if (this.state.previousObjectNode.isFinish) {\n          finishNode = { x: col, y: row };\n        }\n      }\n    } else {\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col, startNode, finishNode);\n    }\n\n    this.setState({ grid: newGrid, startNode, finishNode, previousObjectNode: this.state.grid[row][col] });\n  }\n\n  handleMouseUp() {\n    if (this.state.isAlgoProcessing) return;\n\n    this.setState({ mouseIsPressed: false, pressedNodeStatus: NORMAL_NODE_PRESSED, previousObjectNode: null });\n  }\n\n  visualizeDijkstra() {\n    this.setState({ isAlgoProcessing: true });\n    this.clearBoard();\n    const { grid } = this.state;\n    const startNode = grid[this.state.startNode.y][this.state.startNode.x];\n    const finishNode = grid[this.state.finishNode.y][this.state.finishNode.x];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    this.setState({ isAlgoProcessing: false });\n  }\n\n  visualizeAStar() {\n    this.setState({ isAlgoProcessing: true });\n    this.clearBoard();\n    const { grid } = this.state;\n    const startNode = grid[this.state.startNode.y][this.state.startNode.x];\n    const finishNode = grid[this.state.finishNode.y][this.state.finishNode.x];\n    let nodesToAnimate = [];\n    astar(startNode, finishNode, nodesToAnimate, grid, '');\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderAStar(finishNode);\n    animateAStar(nodesToAnimate, nodesInShortestPathOrder);\n    this.setState({ isAlgoProcessing: false });\n  }\n\n  handleWidthChange(event) {\n    // this.clearBoard();\n    const startNode = { x: Math.floor(Math.random() * (this.state.width - 1)), y: Math.floor(Math.random() * (this.state.height - 1)) };\n    const finishNode = { x: Math.floor(Math.random() * (this.state.width - 1)), y: Math.floor(Math.random() * (this.state.height - 1)) };\n\n    const grid = getInitialGrid(this.state.width, this.state.height, startNode, finishNode);\n\n    this.setState({ grid: grid, startNode, finishNode, width: event.target.value });\n  }\n\n  handleHeightChange(event) {\n    // this.clearBoard();\n    const startNode = { x: Math.floor(Math.random() * (this.state.width - 1)), y: Math.floor(Math.random() * (this.state.height - 1)) };\n    const finishNode = { x: Math.floor(Math.random() * (this.state.width - 1)), y: Math.floor(Math.random() * (this.state.height - 1)) };\n\n    const grid = getInitialGrid(this.state.width, this.state.height, startNode, finishNode);\n\n    this.setState({ grid: grid, startNode, finishNode, height: event.target.value });\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <div id=\"controls\">\n          <button id=\"primary-button\" onClick={() => this.visualizeDijkstra()}>\n            Visualize Dijkstra's Algorithm\n        </button>\n          <button id=\"primary-button\" onClick={() => this.visualizeAStar()}>\n            Visualize A*\n        </button>\n          <button id=\"secondary-button\" onClick={() => this.clearBoard()}>\n            Clear Board\n        </button>\n          <div className=\"display-flex\">\n            <span>Width ({this.state.width}): </span>\n            <input\n              id=\"grid-row\"\n              type=\"range\"\n              min=\"10\" max=\"70\"\n              value={this.state.width}\n              onChange={(event) => this.handleWidthChange(event)}\n              step=\"1\" />\n          </div>\n          <div className=\"display-flex\">\n            <span>Height ({this.state.height}): </span>\n            <input\n              id=\"grid-col\"\n              type=\"range\"\n              min=\"10\" max=\"30\"\n              value={this.state.height}\n              onChange={(event) => this.handleHeightChange(event)}\n              step=\"1\" />\n          </div>\n        </div>\n        <div className=\"legends display-flex flex-col\">\n          <div className=\"display-flex\">Start: <span className=\"legend start\"></span></div>\n          <div className=\"display-flex\">Escape: <span className=\"legend finish\"></span></div>\n          <div className=\"display-flex\">Successful escape: <span className=\"legend shortest-path-finish\"></span></div>\n          <div className=\"display-flex\">Visited: <span className=\"legend visited\"></span></div>\n          <div className=\"display-flex\">Shortest path: <span className=\"legend shortest-path\"></span></div>\n        </div>\n        <table className=\"grid\">\n          <tbody>\n            {grid.map((row, rowIdx) => {\n              return (\n                <tr id={`row ${rowIdx}`} key={rowIdx}>\n                  {row.map((node, nodeIdx) => {\n                    const { row, col, isFinish, isStart, isWall } = node;\n                    return (\n                      <Node\n                        key={nodeIdx}\n                        col={col}\n                        isFinish={isFinish}\n                        isStart={isStart}\n                        isWall={isWall}\n                        mouseIsPressed={mouseIsPressed}\n                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                        onMouseEnter={(row, col) =>\n                          this.handleMouseEnter(row, col)\n                        }\n                        onMouseUp={() => this.handleMouseUp()}\n                        row={row}\n                        id={`${row}-${col}`}></Node>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n\n  clearBoard() {\n    const newGrid = this.state.grid.slice();\n\n    const baseClasses = ['node', 'start', 'finish', 'wall'];\n\n    for (let row = 0; row < this.state.height; row++) {\n      for (let col = 0; col < this.state.width; col++) {\n        const domElement = document.getElementById(`node-${row}-${col}`);\n        if (this.state.grid[row] && this.state.grid[row][col]) {\n          const node = this.state.grid[row][col];\n\n          let intersectionList = ['node'];\n          if (domElement && domElement.className) {\n            intersectionList = baseClasses.filter(value => -1 !== domElement.className.split(' ').indexOf(value));\n          }\n\n          domElement.className = intersectionList.join(' ');\n          const newNode = {\n            ...node,\n            distance: Infinity,\n            startDistance: Infinity,\n            visited: false,\n            isVisited: false,\n            previousNode: null,\n            direction: null,\n            totalDistance: Infinity,\n            heuristicDistance: null,\n            path: null,\n            weight: 0,\n          };\n          newGrid[row][col] = newNode;\n        }\n      }\n    }\n    this.setState({ grid: newGrid });\n  }\n}\n\nconst getInitialGrid = (width, height, startPos, finishPos) => {\n  const grid = [];\n\n  for (let row = 0; row < height; row++) {\n    const currentRow = [];\n    for (let col = 0; col < width; col++) {\n      const node = createNode(col, row, startPos, finishPos);\n      currentRow.push(node);\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n}\n\nconst createNode = (col, row, startPos, finishPos) => {\n  const isStart = row === startPos.y && col === startPos.x;\n  const isFinish = row === finishPos.y && col === finishPos.x;\n\n  return {\n    col,\n    row,\n    id: `${row}-${col}`,\n    isStart: isStart,\n    isFinish: isFinish,\n    distance: Infinity,\n    totalDistance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n    nodeType: isStart ? START_NODE_PRESSED : isFinish ? FINISH_NODE_PRESSED : NORMAL_NODE_PRESSED,\n    direction: null,\n    heuristicDistance: null,\n    path: null,\n    weight: 0,\n    status: 'unvisited'\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col, startNode, finishNode) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if (!(node.isStart || node.isFinish)) {\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n      status: node.isWall ? 'unvisited' : 'wall',\n    };\n    newGrid[row][col] = newNode;\n  }\n  return newGrid;\n};\n\nconst getNewGridWithDraggedObject = (grid, prevRow, prevCol, currentRow, currentCol) => {\n  const newGrid = grid.slice();\n  const prevNode = newGrid[prevRow][prevCol];\n  const currentNode = newGrid[currentRow][currentCol];\n  if (prevNode.isStart) {\n    const newPrev = {\n      ...prevNode,\n      isStart: false,\n      nodeType: NORMAL_NODE_PRESSED,\n    };\n    const newCurrent = {\n      ...currentNode,\n      isStart: true,\n      nodeType: START_NODE_PRESSED,\n      isWall: currentNode.isWall ? false : currentNode.isWall,\n    };\n    newGrid[prevRow][prevCol] = newPrev;\n    newGrid[currentRow][currentCol] = newCurrent;\n  }\n  if (prevNode.isFinish) {\n    const newPrev = {\n      ...prevNode,\n      isFinish: false,\n      nodeType: NORMAL_NODE_PRESSED,\n    };\n    const newCurrent = {\n      ...currentNode,\n      isFinish: true,\n      nodeType: FINISH_NODE_PRESSED,\n      isWall: currentNode.isWall ? false : currentNode.isWall,\n    };\n    newGrid[prevRow][prevCol] = newPrev;\n    newGrid[currentRow][currentCol] = newCurrent;\n  }\n  return newGrid;\n};","import React from 'react';\nimport './App.css';\nimport Board from './Board/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board></Board>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}